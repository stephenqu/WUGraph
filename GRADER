                                     GRADER

Name of student running submit: Stephen Qu
Login of student running submit: cs61b- FILL IN

Second team member's name: Vincent Tian
Second team member's login: cs61b-jl

Third team member's name (if any): Qiu Yuan Lim
Third team member's login: cs61b-jk

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?

Yes.

Have you tested your program on the machines in the Soda CS 61B lab?

Yes.

Is there anything else the graders should know to help them read your project?

No.

Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.


---------------------------------------------------------------------------------------------------|
Classes: Board, Connections, MachinePlayer, Move, Player, SList, SListNode                         |
---------------------------------------------------------------------------------------------------|
Coder    |  Module    |  Methods                                       |  class the methods are in |
---------|------------|------------------------------------------------|---------------------------|
Vincent  |   1        |   WUGraph miniSpanTree		               |  class Kruskal	           |
         |	      |                    	 	               |  class Edge         	   |
	 |	      |                   		               |  class Sort   	           |
---------|------------|------------------------------------------------|---------------------------|
Magdalene|   2        |   addVertex()		                       |  class WUGraph 	   |
	 |	      |	  removeVertex()			       |     	  		   |
	 |	      |   degree()                                     |	       		   |	
	 |	      |	  isVertex()     	 		       |         		   |	
	 |	      | 	  				       |               		   |
---------|------------|------------------------------------------------|---------------------------|
Stephen  |   3        |  getNeighbors()				       |  class WUGraph		   |
	 |	      |	 addEdge()				       |			   |
	 |	      |	 removeEdge()				       |			   |
	 |	      |	 isEdge()				       |			   |
	 |	      |	 weight()				       |	      	           | 
         |            |   					       |                           |
---------|------------|------------------------------------------------|---------------------------|
Extra    |   4        |  			                       | 	                   |
---------|------------|------------------------------------------------|---------------------------|
Extra    |   5        |   			                       |	   		   |
---------|------------|------------------------------------------------|---------------------------|


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MODULE DESCRIPTIONS:
 Kruskal's algorithm, edges
-------------------------------------------------------------------------------------------------------------------------|
Module 1 (interface description):	Kruskal's algorithm finds the minimum spanning tree of a graph														
-------------------------------------------------------------------------------------------------------------------------|
Method Signature:
public static WUGraph minSpanTree(WUGraph g)								



Method Description:
[1]  Creates a new graph T having the same vertices as G.
[2]  Makes a list of all the edges in G.  	

	[3]  Sorts the edges by weight.
[4]  Finds the edges of T using disjoint sets and maps the
 objects that serve as 
	vertices to unique integers.  
[5]  Returns the minimum spanning tree

-------------------------------------------------------------------------------------------------------------------------|
																				 

																								 
-------------------------------------------------------------------------------------------------------------------------|
Module 2 (interface description): Vertex																					 
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public void addVertex(Object vertex)																						 
																														 
Method Description:
addVertex() adds a vertex (with no incident edges) to the graph. The vertex's "name" is the object 
	provided as the parameter "vertex". If this object is already a vertex of the graph, the graph is unchanged.	
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public void removeVertex(Object vertex)																						 
																														 
Method Description:removeVertex() removes a vertex from the graph. All edges incident on the deleted vertex are removed 
	as well. If the parameter "vertex" does not represent a vertex of the graph, the graph is unchanged.	
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public boolean isVertex(Object vertex)																						 
																														 
Method Description:isVertex() returns true if the parameter "vertex" represents a vertex of the graph.		
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public int degree(Object vertex)																						 
																														 
Method Description:degree() returns the degree of a vertex. Self-edges add only one to the degree of a vertex. If the 
	parameter "vertex" doesn't represent a vertex of the graph, zero is returned.																					 
-------------------------------------------------------------------------------------------------------------------------|
Module 3 (interface description): Edges																					 
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public Neighbors getNeighbors(Object vertex)																							 
																														 
Method Description: getNeighbors() returns a new Neighbors object referencing two arrays. The Neighbors.neighborList 
	array contains each object that is connected to the input object by an edge. The Neighbors.weightList array 
	contains the weights of the corresponding edges. 																					 																	 
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public void addEdge(Object u, Object v, int weight)																							 
																														 
Method Description: addEdge() adds an edge (u, v) to the graph. 													
-------------------------------------------------------------------------------------------------------------------------|
Method Signature:public void removeEdge(Object u, Object v) 																					 
																														 
Method Description: removeEdge() removes an edge (u, v) from the graph. If either of the parameters u and v does not 
	represent a vertex of the graph, the graph is unchanged. If (u, v) is not an edge of the graph, the graph is 
	unchanged.													
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public boolean isEdge(Object u, Object v)																							 
																														 
Method Description: isEdge() returns true if (u, v) is an edge of the graph. Returns false if (u, v) is not an edge 
	(including the case where either of the parameters u and v does not represent a vertex of the graph).													
-------------------------------------------------------------------------------------------------------------------------|
Method Signature: public int weight(Object u, Object v)																							 
																														 
Method Description: weight() returns the weight of (u, v). Returns zero if (u, v) is not an edge (including the case 
	where either of the parameters u and v does not represent a vertex of the graph).																					 																				 
-------------------------------------------------------------------------------------------------------------------------|

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



CLASS DESCRIPTIONS:

-------------------------------------------------------------------------------------------------------------------------
Class: Sort-public class that uses quicksort to sort Edge arrays.

-------------------------------------------------------------------------------------------------------------------------
Method: private static void swap(Object[] array, int i, int j)
Description: Swaps two objects in an array
-------------------------------------------------------------------------------------------------------------------------
Method: private static int partition(Edge[] array, int begin, int end)
Description: takes in an Edge array, and two ints: the beginning and end. If index or end is null, subtracts the index/end
	 
int until it is not null. Partition sorts the Edge array and returns a new int index
-------------------------------------------------------------------------------------------------------------------------

Method: private static void swap(Object[] array, int i, int j)
Description: 
-------------------------------------------------------------------------------------------------------------------------

Method: private static void qsort(Edge[] array, int begin, int end)
Description: generic Quick Sort algorithm that handles arrays that are already sorted, and arrays with duplicate keys.
-------------------------------------------------------------------------------------------------------------------------

Method: public static void sort(Edge[] array)
Description: Quick Sort algorithm

-------------------------------------------------------------------------------------------------------------------------



-
-------------------------------------------------------------------------------------------------------------------------

Class: Edge2-public class that represents an Edge, with the fields vertex1, vertex2, and weight

-------------------------------------------------------------------------------------------------------------------------
Method: public boolean isSameEdge(Object edge1, Object edge2)
Description: Takes in edges and checks if their respective vertexes are equal. If so, returns true, and if not, returns false.
-------------------------------------------------------------------------------------------------------------------------

Method: public int compareTo(int pivot)
Description: takes in an int (the pivot), and compares the weight of the edge to the pivot. 
If the weight of the edge is 
	greater, a positive number is returned, and if not, a negative number is returned.


-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
Class: Kruskal-The Kruskal class contains the method minSpanTree(), which implements Kruskal's algorithm for computing a 
	
minimum spanning tree of a graph.

-------------------------------------------------------------------------------------------------------------------------
Method: public static WUGraph minSpanTree(WUGraph g)
Description: minSpanTree() returns a WUGraph that represents the minimum spanning tree of the WUGraph g. 
The original 
	WUGraph g is NOT changed.

-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
Class: Vertex- creates a vertex object that consists the item, a DList of edges, and a reference to the node in the 
	adjacency list
-DESCRIPTION
-------------------------------------------------------------------------------------------------------------
Method: public int degree()
Description: This degree() method returns the degree of the vertex. The degree is the number of edges coming out of 
	this vertex
-------------------------------------------------------------------------------------------------------------------------
Method: public Object item()
Description: This item() method returns the Vertex item itself, not the object which also has references to its edges
-------------------------------------------------------------------------------------------------------------------------
Method: public Vertex other(Edge e)
Description: This other() method returns the corresponding vertex of the edge 
-------------------------------------------------------------------------------------------------------------------------
Method: public boolean equals(Vertex v)
Description: This equals() method tells the program whether two vertices are equal, despite differences in their Dlist 
	of edges
-------------------------------------------------------------------------------------------------------------------------
Method: public DList edges()
Description: This edges() method allows something outside this program to access the Vertex's edges

-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
Class: Edge - This edge constructor creates an edge, which includes a VertexPair, its weight, and two references to 
	its DListNode, to facilitate removal in O(1) time.
-
-------------------------------------------------------------------------------------------------------------------------
Method: public int weight()
Description:This weight() method returns the weight of the edge, which in itself is hidden.
-------------------------------------------------------------------------------------------------------------------------
Method: public void setWeight(int w)
Description: This setWeight() method allows an outside source to change the weight of an edge, without violating 
	abstraction rules.
-------------------------------------------------------------------------------------------------------------------------
Method: public boolean equals(Edge e)
Description: This equals() method overrides the default equals method and compares whether an edge is the same as 
	another edge, regardless of the order in which the vertices are provided and the edge's weight
-------------------------------------------------------------------------------------------------------------------------





Method: public int hashCode()
Description: This hashcode method overrides the default one, by referring it to the hash code provided by VertexPair

-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
Class: VertexPair - The VertexPair represents a pair of objects that act as vertices in a WUGraph (weighted, undirected 
	graph).  The purpose of a VertexPair is to act as a key for Java's hashCode() and equals() functions.  It is 
	designed so that the order of the two objects is immaterial; (u, v) is the same as (v, u).
-
-------------------------------------------------------------------------------------------------------------------------
Method: public int hashCode()
Description: hashCode() returns a hashCode equal to the sum of the hashCodes of each of the two objects of the pair, so 
	that the order of the objects will not affect the hashCode. 
-------------------------------------------------------------------------------------------------------------------------
Method: public boolean equals(Object o)
Description: equals() returns true if this VertexPair represents the same unordered pair of objects as the parameter "o".
	The order of the pair does not affect the equality test, so (u, v) is found to be equal to (v, u).

-------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------
Class: WUGraph - The WUGraph class represents a weighted, undirected graph. Self-edges are permitted.
-
-------------------------------------------------------------------------------------------------------------------------
Method: public int vertexCount()
Description: vertexCount() returns the number of vertices in the graph.
-------------------------------------------------------------------------------------------------------------------------
Method: public int edgeCount()
Description: edgeCount() returns the number of edges in the graph.
-------------------------------------------------------------------------------------------------------------------------
Method: public Object[] getVertices()
Description: getVertices() returns an array containing all the objects that serve as vertices of the graph. The array's 
	length is exactly equal to the number of vertices. If the graph has no vertices, the array has length zero. 
-------------------------------------------------------------------------------------------------------------------------
Method: public void addVertex(Object vertex)
Description: addVertex() adds a vertex (with no incident edges) to the graph. The vertex's "name" is the object provided 
	as the parameter "vertex". If this object is already a vertex of the graph, the graph is unchanged.
-------------------------------------------------------------------------------------------------------------------------





Method: public void removeVertex(Object vertex)
Description: removeVertex() removes a vertex from the graph. All edges incident on the deleted vertex are removed 
	as well. If the parameter "vertex" does not represent a vertex of the graph, the graph is unchanged.
-------------------------------------------------------------------------------------------------------------------------
Method: public boolean isVertex(Object vertex)
Description: isVertex() returns true if the parameter "vertex" represents a vertex of the graph.
-------------------------------------------------------------------------------------------------------------------------
Method: public int degree(Object vertex)
Description: degree() returns the degree of a vertex. Self-edges add only one to the degree of a vertex. If the parameter 
	"vertex" doesn't represent a vertex of the graph, zero is returned.
-------------------------------------------------------------------------------------------------------------------------
Method: public Neighbors getNeighbors(Object vertex)
Description: getNeighbors() returns a new Neighbors object referencing two arrays. The Neighbors.neighborList array 
	contains each object that is connected to the input object by an edge.
-------------------------------------------------------------------------------------------------------------------------
Method: public void addEdge(Object u, Object v, int weight)
Description: addEdge() adds an edge (u, v) to the graph. 
-------------------------------------------------------------------------------------------------------------------------
Method: public void removeEdge(Object u, Object v)
Description: removeEdge() removes an edge (u, v) from the graph. 
-------------------------------------------------------------------------------------------------------------------------
Method: public boolean isEdge(Object u, Object v)
Description: isEdge() returns true if (u, v) is an edge of the graph.
-------------------------------------------------------------------------------------------------------------------------
Method: public int weight(Object u, Object v)
Description: weight() returns the weight of (u, v). Returns zero if (u, v) is not an edge (including the case where 
	either of the parameters u and v does not represent a vertex of the graph).
-------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------
Class:
-DESCRIPTION
-------------------------------------------------------------------------------------------------------------------------
Method:
Description:
-------------------------------------------------------------------------------------------------------------------------
Method:
Description:
-------------------------------------------------------------------------------------------------------------------------
Method:
Description:
-------------------------------------------------------------------------------------------------------------------------
Method:
Description:
-------------------------------------------------------------------------------------------------------------------------
